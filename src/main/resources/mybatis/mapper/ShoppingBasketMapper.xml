<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cafe.megacoffee.basket.repository.ShoppingBasketMapper">

    <update id="findshoppingBasketId" parameterType="com.cafe.megacoffee.basket.dto.BasketDTO">
        <selectKey keyProperty="shoppingBasketId" resultType="java.lang.Integer" order="AFTER">
            select
                shopping_basket_id shoppingBasketId
            from
                shopping_basket
            where
                member_id = #{memberId}
        </selectKey>
        merge into
            shopping_basket sb
            using
                dual
            on (sb.shopping_basket_id = (select case when shopping_basket_id is null then 0
        else shopping_basket_id end shopping_basket_id
        from shopping_basket
        where member_id = #{memberId}
        and shopping_basket_status = #{shoppingBasketStatus}))
            when matched then
                update set
                    SHOPPING_BASKET_DATE = sysdate
            when not matched then
            insert
                (sb.shopping_basket_id, sb.member_id, sb.shopping_basket_status)
            values
                (shopping_basket_seq.nextval, #{memberId}, #{shoppingBasketStatus})
    </update>

    <update id="saveShoppingItem" parameterType="com.cafe.megacoffee.basket.dto.ShoppingItem">
        merge into
            shopping_item si
            using
                dual
            on (si.shopping_item_id = (select case
                                                  when
                                                      shopping_item_id is null
                                                      then 0
                                                  else shopping_item_id end shopping_item_id
                                       from shopping_item
                                       where shopping_basket_id = #{shoppingBasketId}
                                         and item_id = #{itemId} and order_cup = #{orderCup} and
                order_option = #{orderOption} and order_size = #{orderSize}))
            when matched then
                update
                    set
                        si.order_count = (select order_count + #{orderCount}
                                          from shopping_item
                                          where shopping_basket_id = #{shoppingBasketId}
                                            and item_id = #{itemId} and order_cup = #{orderCup} and
                                         order_option = #{orderOption} and order_size = #{orderSize}),
                        si.order_price = (select order_price + #{orderPrice}
                                            from shopping_item
                                            where shopping_basket_id = #{shoppingBasketId}
                                            and item_id = #{itemId} and order_cup = #{orderCup} and
                                            order_option = #{orderOption} and order_size = #{orderSize})
            when not matched then
                insert
                    (si.shopping_item_id, si.shopping_basket_id, si.item_id, si.order_count, si.order_price, si.order_cup, si.order_option, si.order_size)
                values
                    (shopping_item_id_seq.nextval, #{shoppingBasketId}, #{itemId}, #{orderCount},#{orderPrice},#{orderCup},#{orderOption},#{orderSize})
    </update>
</mapper>