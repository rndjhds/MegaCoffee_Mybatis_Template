<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cafe.megacoffee.order.repository.OrderMapper">

    <insert id="createOrder" parameterType="com.cafe.megacoffee.order.dto.Orders">
        <selectKey keyProperty="orderId" resultType="java.lang.Integer" order="AFTER">
            select
                order_id orderId
            from
                orders
            where
                order_status = #{orderStatus}
            and
                member_id = #{memberId}
        </selectKey>
        insert into
            orders (order_id, member_id, order_date, order_status, store_id, amount, merchant_uid, order_product_name)
        values
            (order_seq.nextval, #{memberId}, sysdate, #{orderStatus}, #{storeId}, #{amount}, #{merchantUid}, #{orderProductName})
    </insert>

    <insert id="creatOrderItem" parameterType="com.cafe.megacoffee.order.dto.OrderItem">
        insert into
            order_item (order_item_id, order_id, item_id, order_price, order_count, order_cup, order_option, order_size)
        values (order_item_seq.nextval, #{orderId}, #{itemId}, #{orderPrice}, #{orderCount}, #{orderCup, jdbcType=VARCHAR}, #{orderOption, jdbcType=VARCHAR}, #{orderSize, jdbcType=VARCHAR})
    </insert>

    <update id="updateOrderStatus" parameterType="com.cafe.megacoffee.order.dto.Orders">
        update
            orders
        set
            order_status = #{orderStatus}
        where
            order_id = #{orderId}
    </update>

    <select id="findOrderItemByStoreId" parameterType="com.cafe.megacoffee.order.dto.Orders" resultType="Map">
        select
            *
        from (
            select
                rownum rnum,
                orders.*
            from (
                select
                    o.order_id orderId,
                    listagg(i.title,',') within group(order by oi.order_item_id desc) title,
                    listagg(oi.order_option,',') within group(order by oi.order_item_id desc) orderOption,
                    listagg(case when oi.order_cup is null then '컵이 필요없는 상품입니다'
                                when oi.order_cup = 'disposable' then '일회용 컵'
                                when oi.order_cup = 'tumbler' then '텀블러'
                                when oi.order_cup = 'shopCup' then '매장컵'
                                                        else oi.order_cup end,',') within group(order by oi.order_item_id desc) orderCup,
                    listagg(oi.order_size,',') within group(order by oi.order_item_id desc) orderSize,
                    listagg(oi.order_count,',') within group (order by oi.order_item_id desc),
                    o.member_id buyer,
                    o.amount
                from
                    item i
                inner join
                    order_item oi
                on
                    i.item_id = oi.item_id
                inner join
                    orders o
                on
                    o.order_id = oi.order_id
                where
                    o.store_id = #{storeId}
                and
                    o.order_status = 'ORDERCOMP'
                group by o.order_id, o.member_id, o.amount
                )orders order by orders.orderId desc)
        where rnum between ${pagination.start + 1} and ${pagination.start + pagination.length}
    </select>

    <select id="findOrderItemCountByStoreId" parameterType="com.cafe.megacoffee.order.dto.Orders" resultType="int">
        select
            count(order_id)
        from
            orders
        where
            store_id = #{storeId}
        and
            order_status = 'ORDERCOMP'
    </select>

    <select id="findOrderedItemList" parameterType="Map" resultType="Map">
        select
            *
        from (
            select
                rownum rnum,
                ordered.*
            from (
                select
                    o.order_id,
                    category.parent_name parentName,
                    category.child_name childName,
                    i.title,
                    oi.order_option orderOption,
                    oi.order_cup orderCup,
                    oi.order_size orderSize,
                    o.member_id buyer,
                    s.store_name storeName,
                    s.member_id manager,
                    to_char(o.order_date,'yyyy/MM/dd') orderDate
                from
                    orders o
                        inner join
                    order_item oi
                        on
                    o.order_id = oi.order_id
                        inner join
                    item i
                        on
                    oi.item_id = i.item_id
                        inner join
                    store s
                        on
                    o.store_id = s.store_id
                        inner join (
                            select
                                parent.name parent_name,
                                child.name child_name,
                                child.category_id child_category_id,
                                parent.category_id parent_category_id
                            from
                                category child, category parent
                            where
                                child.parent_id = parent.category_id
                            ) category
                        on
                    category.child_category_id = i.category_id
                where
                   1 = 1
                <if test="parentCategoryId != null and parentCategoryId neq ''">
                    and category.parent_category_id = #{parentCategoryId}
                </if>
                <if test="storeId != null and storeId neq ''">
                    and s.store_id = #{storeId}
                </if>
                <if test="childCategoryId != null and childCategoryId neq ''">
                    and category.child_category_id = #{childCategoryId}
                </if>
                <if test="title != null and title neq ''">
                    and i.title = #{title}
                </if>
                <if test="startDate != null and startDate neq ''">
                    and
                    to_char(o.order_date, 'yyyy-MM-dd') <![CDATA[>=]]> #{startDate}
                </if>
                <if test="endDate != null and endDate neq ''">
                    and
                    to_char(o.order_date, 'yyyy-MM-dd') <![CDATA[<=]]> #{endDate}
                </if>
                    ) ordered order by ordered.order_id desc
                )
        where rnum between ${start + 1} and ${start + length}
    </select>

    <select id="getOrderedItemCount" parameterType="Map" resultType="int">
        select
            count(*)
        from (
            select
                rownum rnum,
                ordered.*
            from (
                select
                    category.parent_name parentName,
                    category.child_name childName,
                    i.title,
                    oi.order_option orderOption,
                    oi.order_cup orderCup,
                    oi.order_size orderSize,
                    o.member_id buyer,
                    s.store_name storeName,
                    s.member_id manager,
                    to_char(o.order_date,'yyyy/MM/dd') orderDate
                from
                    orders o
                inner join
                    order_item oi
                on
                    o.order_id = oi.order_id
                inner join
                    item i
                on
                    oi.item_id = i.item_id
                inner join
                    store s
                on
                    o.store_id = s.store_id
                inner join (
                        select
                            parent.name parent_name,
                            child.name child_name,
                            child.category_id child_category_id,
                            parent.category_id parent_category_id
                        from
                            category child, category parent
                        where
                            child.parent_id = parent.category_id
                        ) category
                on
                    category.child_category_id = i.category_id
                where
                    1 = 1
                <if test="parentCategoryId != null and parentCategoryId neq ''">
                    and category.parent_category_id = #{parentCategoryId}
                </if>
                <if test="storeId != null and storeId neq ''">
                    and s.store_id = #{storeId}
                </if>
                <if test="childCategoryId != null and childCategoryId neq ''">
                    and category.child_category_id = #{childCategoryId}
                </if>
                <if test="title != null and title neq ''">
                    and i.title = #{title}
                </if>
                <if test="startDate != null and startDate neq ''">
                    and
                    to_char(o.order_date, 'yyyy-MM-dd') <![CDATA[>=]]> #{startDate}
                </if>
                <if test="endDate != null and endDate neq ''">
                    and
                    to_char(o.order_date, 'yyyy-MM-dd') <![CDATA[<=]]> #{endDate}
                </if>
                ) ordered
                )
            where rnum between ${start + 1} and ${start + length}
    </select>
</mapper>